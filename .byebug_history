c
@rates.find_by!(from: self.name, to: currency)
n
self
currency
c
amount
currency
exit
Expense.find(2)
c
ap ex
ex
exit
ap @incomes.group_by{|i| [i.income_source.name , i.currency.name]}.map{|r| r}
ap @incomes.group_by{|i| [i.income_source.name , i.currency.name]}
ap @incomes.group_by{|i| [i.income_source.name , i.currency.name]}.sum(:amount)
ap @incomes.group_by{|i| [i.income_source.name , i.currency.name]}
ap @incomes.group_by{|i| [i.income_source_id , i.currency_id]}
@incomes.group_by{|i| [i.income_source_id , i.currency_id]}
@incomes.group_by{|i| [i.income_source_id , e.currency_id]}
ap @incomes.group_by(&:income_source).sum(:amount)
ap @incomes.group_by(&:income_source)
@incomes.group_by(&:income_source)
@incomes.group_by(:income_source)
c
@incomes.map(&:year)
@incomes.map(&:month)
ap @expenses.map(&:month)
ap @expenses.map(&:year)
ap @expenses.map(&:year, &:month)
ap @expenses.map(&:comments)
@expenses.map(&:comments)
params
parmas
@expenses.count
@incomes.count
c
params
c
n
c
ap params
params
c
params[:filter].present?
c
v
n
c
params
c
params
c
ap @incomes.group_by(&:income_source).sum(:amount)
ap @incomes.group_by(&:income_source)
c
ap @incomes.group_by(&:income_source)
c
ap @incomes.group_by(&:income_source)
@incomes.group_by(&:income_source)
c
ap @incomes.group_by(&:income_source).map {|k,v| {name: k.name, value: v.map(&:amount).sum} }
ap @incomes.group_by(&:income_source).map {|k,v| {name: k.name, value: v.map(&:amount)} }
ap @incomes.group_by(&:income_source).map {|k,v| {name: k.name, value: v} }
ap @incomes.group_by(&:income_source).map {|k,v| {k.name, v} }
ap @incomes.group_by(&:income_source).map {|k,v| [k.name, v] }
ap @incomes.group_by(&:income_source).map {|k,v| [k.name, v.map(:&amount)] }
ap @incomes.group_by(&:income_source).map {|k,v| [k.name, v.length] }
ap @incomes.group_by(&:income_source.name).map {|k,v| [k, v.length] }
ap @incomes.group_by(&:income_source_id).map {|k,v| [k, v.length] }
ap @incomes.group_by(&:income_source).map {|k,v| [k, v.length] }
ap @incomes.count
ap @incomes.group_by(&:income_source)
ap @incomes.group_by(&:income_source).map {|k,v| {a: k}}
ap @incomes.group_by(&:income_source).map {|k,v| [k, v.length]}
@incomes.group_by(&:income_source).map {|k,v| [k, v.length]}
@incomes.group_by(&:name).map {|k,v| [k, v.length]}
ap Income.joins(:income_source).group('income_sources.name').sum(:amount)
Income.joins(:income_source).group('income_sources.name').sum(:amount)
ap Income.joins(:income_source).group('income_sources.name').sum(:amount)
Income.joins(:income_source).group('income_sources.name').sum(:amount)
@incomes
c
@rates.find_by(from: from, to: to)
@rates
n
exit
ap Income.last
Income.last
Income.create!(income_params)
c
parc
Income.create!(income_params)
c
Income.create!(income_params)
income_params
c
income_params
c
Income.create!(income_params)
income_params
c
Income.create!(income_params)
@income
income_params
c
income_params
@income
c
income_params
c
income_params
ap params
params
exit
ap Income.last.income_source
ap Income.last.income_sourec
ap Income.all
ap e
ap Income.all
c
ap Income.all
ap Income.last
c
ap Income.last
Income.last
n
c
reload!
ap e
self.year.to_i
c
n
src
n
exit
IncomeSource.find_or_create_by(name: e.income_src)
e.income_src
ap e
e
c
n
c
n
params[:filter].present?
c
params
c
params
c
params
c
params
c
DateTime.now.year
month: DateTime.now.year
DateTime.now.year
exit
c
exit
ap row
c
ap row
c
ap row
c
ap row
row
exit
c
n
c
n
currency
exit
c
ap expense
c
ap expense
expense.update_columns(created_at: DateTime.new(expense.year.to_i, expense.month.to_i, 1))
DateTime.new(expense.year.to_i, expense.month.to_i, 1)
c
n
self.expense_type
expense_type
n
user
n
category
n
c
exit
row
exit
hash_row
exit
OldExpense.last
old_expense_params
c
OldExpense.create!(old_expense_params)
c
?
ap old_expense_params
c
ap old_expense_params
old_expense_params
c
OldExpense.create!(old_expense_params)
ap old_expense_params
old_expense_params
c
 @old_expense = OldExpense.create!(params)
c
ap params
params
c
hash_row.count
exit
hash_row.count
hash_row
c
hash_row.count
hash_row
c
hash_row
hash_row.count
exit
hash_row.count
hash_row
hash_ro\w
hash_roe
c
?
hash_row.count
hash_row
exit
hash_row
c
hash_row
c
hash_row
hash_row[
exit
ap OldExpense.all.count
c
hash_row
c
ap OldExpense.all
c
ap OldExpense.all
ap OldExpense.last
c
ap OldExpense.last
c
ap OldExpense.last
