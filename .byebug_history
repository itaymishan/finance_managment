exit
ap Income.last.income_source
ap Income.last.income_sourec
ap Income.all
ap e
ap Income.all
c
ap Income.all
ap Income.last
c
ap Income.last
Income.last
n
c
reload!
ap e
self.year.to_i
c
n
src
n
exit
IncomeSource.find_or_create_by(name: e.income_src)
e.income_src
ap e
e
c
n
c
n
params[:filter].present?
c
params
c
params
c
params
c
params
c
DateTime.now.year
month: DateTime.now.year
DateTime.now.year
exit
c
exit
ap row
c
ap row
c
ap row
c
ap row
row
exit
c
n
c
n
currency
exit
c
ap expense
c
ap expense
expense.update_columns(created_at: DateTime.new(expense.year.to_i, expense.month.to_i, 1))
DateTime.new(expense.year.to_i, expense.month.to_i, 1)
c
n
self.expense_type
expense_type
n
user
n
category
n
c
exit
row
exit
hash_row
exit
OldExpense.last
old_expense_params
c
OldExpense.create!(old_expense_params)
c
?
ap old_expense_params
c
ap old_expense_params
old_expense_params
c
OldExpense.create!(old_expense_params)
ap old_expense_params
old_expense_params
c
 @old_expense = OldExpense.create!(params)
c
ap params
params
c
hash_row.count
exit
hash_row.count
hash_row
c
hash_row.count
hash_row
c
hash_row
hash_row.count
exit
hash_row.count
hash_row
hash_ro\w
hash_roe
c
?
hash_row.count
hash_row
exit
hash_row
c
hash_row
c
hash_row
hash_row[
exit
ap OldExpense.all.count
c
hash_row
c
ap OldExpense.all
c
ap OldExpense.all
ap OldExpense.last
c
ap OldExpense.last
c
ap OldExpense.last
OldExpense.last
c
ap OldExpense.last
OldExpense.last
c
n
s
row.to_hash.values
row.to_hash.keys
row.to_hash.keysrow.to_hash.keys
row.to_hash.keys
row.to_hash
exit
c
ap row.to_hash.values
ap row.to_hash.keys
c
ap row.to_hash.keys
ap row.to_hash.values
c
ap row.to_hash.values
ap row.to_hash.keys
ap row.to_hashkeys
ap row.keys
ap row
c
ap row
c
ap row
c
ap row
row
c
row
c
ap row.to_hash
row.to_hash
row
ap row
exit
row.to_hash
ap row
row
